

# This file was *autogenerated* from the file endo.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_100 = Integer(100); _sage_const_5 = Integer(5); _sage_const_3 = Integer(3)
from argparse import ArgumentParser
parser=ArgumentParser()

parser.add_argument('-v', '--verbose', action='store_true')
parser.add_argument('-n', '--nbprimes', default='14')

args=parser.parse_args()

proof.arithmetic(False)

def FullRepresentInteger(M, p, trials=_sage_const_0 ):
	m_=floor(float(sqrt(_sage_const_4 *M/p)))
	z_=ZZ.random_element(-m_, m_+_sage_const_1 )

	m__=floor(float( sqrt( (_sage_const_4 *M/p) - z_**_sage_const_2 ) ))
	t_=ZZ.random_element(-m__, m__+_sage_const_1 )

	M_=_sage_const_4 *M-p*((z_)**_sage_const_2 +(t_)**_sage_const_2 )

	try:
		x_,y_=two_squares(M_)
	except ValueError:
		if trials>_sage_const_100 :
			return
		return FullRepresentInteger(M,p,trials+_sage_const_1 )

	if (x_-t_)&_sage_const_1 !=_sage_const_0  or (z_-y_)&_sage_const_1 !=_sage_const_0 :
		if trials>_sage_const_100 :
			return
		return FullRepresentInteger(M,p,trials+_sage_const_1 )
	return (x_, y_, z_, t_)

nb_primes=Integer(args.nbprimes)

cond_file="../../txt/conductor_"+str(nb_primes)+"_primes.md"
if args.verbose:
	print(f"Reading conductor from {cond_file}\n")

F=open(cond_file, "r")
F.readline()
f=Integer(F.readline())
F.close()

primes=[]
p=_sage_const_5 
i=_sage_const_0 
while i<nb_primes:
	if p&_sage_const_3 ==_sage_const_1 :
		primes.append(p)
		i+=_sage_const_1 
	p=p.next_prime()

L1=prod(primes[_sage_const_1 :])**_sage_const_2 
L2=_sage_const_5 
L=L1*L2

prime_file="../../txt/prime_"+str(nb_primes)+"_primes.md"
if args.verbose:
	print(f"Reading characteristic from {prime_file}\n")

G=open(prime_file, "r")
p=Integer(G.readline())
G.close()


if args.verbose:
	print(f"Startng endomorphism generation with FullRepresentInteger\n")
l_0=_sage_const_5 
while l_0<_sage_const_100 :
	if args.verbose:
		print(f"Trying with l_0={l_0}")

	h=floor(float(log(p/f)/log(l_0)))+_sage_const_1 
	M=(l_0**h)*f

	endo=FullRepresentInteger(M,p)

	if endo==None:
		l_0=l_0.next_prime()
		while l_0&_sage_const_3 ==_sage_const_1 :
			l_0=l_0.next_prime()
	else:
		break

if args.verbose:
	print(f"Found endomorphism {endo}/2 of norm M=(l_0**h)*f={l_0}**{h}*{f}\n")

endo_file="../../txt/endo_"+str(nb_primes)+"_primes.md"
if args.verbose:
	print(f"Writing endomorphism to file {endo_file}\n")

K=open(endo_file,"w")
for coeff in endo:
	K.write(f"{coeff}\n")
K.write(f"{l_0}\n{h}\n")
K.close()

