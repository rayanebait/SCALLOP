

# This file was *autogenerated* from the file endo.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_2 = Integer(2); _sage_const_100 = Integer(100); _sage_const_1 = Integer(1); _sage_const_80 = Integer(80); _sage_const_17 = Integer(17); _sage_const_5 = Integer(5); _sage_const_3 = Integer(3)
def FullRepresentInteger(M, p, trials=_sage_const_0 ):
	m_=floor(float(sqrt(_sage_const_4 *M/p)))
	z_=ZZ.random_element(-m_, m_)

	m__=floor(float( sqrt( (_sage_const_4 *M/p) - z_**_sage_const_2 ) ))
	t_=ZZ.random_element(-m__, m__)

	M_=_sage_const_4 *M-p*((z_)**_sage_const_2 +(t_)**_sage_const_2 )

	try:
		x_,y_=two_squares(M_)
	except ValueError:
		if trials>_sage_const_100 :
			return
		return FullRepresentInteger(M,p,trials+_sage_const_1 )

	if (x_-t_)&_sage_const_1 !=_sage_const_0  or (z_-y_)&_sage_const_1 !=_sage_const_0 :
		if trials>_sage_const_100 :
			return
		return FullRepresentInteger(M,p,trials+_sage_const_1 )
	return (x_, y_, z_, t_)


conductor=_sage_const_80 
nb_primes=_sage_const_17 

cond_file="../../txt/conductor_"+str(conductor)+"_bits.md"
F=open(cond_file, "r")
F.readline()
f=Integer(F.readline())
F.close()

primes=[]
p=_sage_const_5 
i=_sage_const_0 
while i<nb_primes:
	if p&_sage_const_3 ==_sage_const_1 :
		primes.append(p)
		i+=_sage_const_1 
	p=p.next_prime()

L1=prod(primes[_sage_const_1 :])**_sage_const_2 
L2=_sage_const_5 
L=L1*L2

prime_file="../../txt/prime_"+str(conductor)+"_bits.md"
G=open(prime_file, "r")
p=Integer(G.readline())
G.close()



print("p=",p,"\nf=",f)
l_0=_sage_const_2 
while l_0<_sage_const_100 :
	h=floor(float(log(p/f)/log(l_0)))+_sage_const_1 
	M=(l_0**h)*f

	endo=FullRepresentInteger(M,p)

	if endo==None:
		l_0=l_0.next_prime()
		while l_0&_sage_const_3 ==_sage_const_1 :
			l_0=l_0.next_prime()
	else:
		break

print(endo, l_0, h)

endo_file="../../txt/endo_"+str(conductor)+"_bits.md"
K=open(endo_file,"w")
for coeff in endo:
	K.write(f"{coeff}\n")
K.write(f"{l_0}\n{h}\n")
K.close()

