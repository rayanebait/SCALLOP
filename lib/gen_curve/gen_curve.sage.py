

# This file was *autogenerated* from the file gen_curve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_3 = Integer(3)
from sage.schemes.elliptic_curves.weierstrass_morphism import *
from argparse import ArgumentParser
from sage.schemes.elliptic_curves.hom_frobenius import EllipticCurveHom_frobenius

class EvalIsogSum:
	def __init__(self,precurve, postcurve, basis=[], coeffs=[_sage_const_1 ,_sage_const_1 ,_sage_const_1 ,_sage_const_1 ]):
		self.precurve=precurve
		self.postcurve=postcurve
		self.basis=basis
		self.coeffs=coeffs

	def fill_basis(self, basis):
		self.basis=basis
	def fill_coeffs(self, coeffs):
		self.coeffs=coeffs
	def evaluate(self, P):
		return sum([self.coeffs[i]*self.basis[i](P) for i in range(len(self.basis))])

proof.arithmetic(False)

parser = ArgumentParser()

parser.add_argument('-v', '--verbose', action='store_true')
parser.add_argument('-n', '--nbprimes', default='14')

args = parser.parse_args()
n=args.nbprimes
if n!='3' and n!='14' and n!='19' and n!='20' and n!='26':
	raise SystemExit(f"Currently supports 14, 19, 20 and 26 primes parameters, not {n}\n")

nb_primes=Integer(n)

if args.verbose:
	print(f"Generating oriented curve for {nb_primes} primes parameter\n")

endo_file="../../txt/endo_"+str(nb_primes)+"_primes.md"
prime_file="../../txt/prime_"+str(nb_primes)+"_primes.md"
cond_file="../../txt/conductor_"+str(nb_primes)+"_primes.md"
alpha_file="../../txt/alpha_"+str(nb_primes)+"_primes.md"

F=open(endo_file, "r")
G=open(prime_file, "r")
H=open(cond_file, "r")
O=open(alpha_file, "r")

p=Integer(G.readline())
K = GF((p,_sage_const_2 ), modulus=[_sage_const_1 ,_sage_const_0 ,_sage_const_1 ], names=('i',)); (i,) = K._first_ngens(1)
R = K['x']; (x,) = R._first_ngens(1)

conductor=Integer(O.readline())
alpha2=-conductor
alpha1=Integer(O.readline())

norm=alpha1**_sage_const_2 +alpha2**_sage_const_2 
trace=_sage_const_2 *alpha1


G.close()
H.close()
O.close()

li=_sage_const_5 
primes=[]
i=_sage_const_0 
while i<nb_primes:
	if li&_sage_const_3 ==_sage_const_1 :
		primes.append(li)
		i+=_sage_const_1 
	li=li.next_prime()


E0=EllipticCurve(K, [_sage_const_1 ,_sage_const_0 ])
pols=[]
psi_alpha1_l=_sage_const_1 
psi_alpha2_l=_sage_const_1 
alpha1_l=_sage_const_1 
alpha2_l=_sage_const_1 

i=_sage_const_0 
for l in primes:
	if i>_sage_const_5 :
		break
	i+=_sage_const_1 

	alpha1_l=Mod(alpha1,l)
	alpha2_l=Mod(alpha2,l)
	
	#gcd(psi_alpha1_l(x),psi_alpha2_l(-x), x^(p**2)-x) ?
	psi_alpha1_l=E0.division_polynomial(alpha1_l)
	psi_alpha2_l=E0.division_polynomial(alpha2_l)


	xbar=R.quotient_by_principal_ideal((psi_alpha1_l)*R).gen(0)
	pols.append((psi_alpha1_l, psi_alpha2_l(-x), (xbar**(p)-x) ))

print( gcd(gcd(pols[_sage_const_1 ][_sage_const_0 ], pols[_sage_const_1 ][_sage_const_1 ]), pols[_sage_const_1 ][_sage_const_2 ]) )
F.close()


#iota=WeierstrassIsomorphism(E0, [-i,0,0,0], E0)

#P=E0.lift_x(4)
#Q=iota(P)
#E0.division_polynomial(10,x)




