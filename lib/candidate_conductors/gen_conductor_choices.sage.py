

# This file was *autogenerated* from the file gen_conductor_choices.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_20 = Integer(20); _sage_const_21 = Integer(21); _sage_const_5 = Integer(5); _sage_const_3 = Integer(3)
def next(L, p_above,p_above_conj, nb_primes, prev_seq, next_seq):
	#print(prev_seq, next_seq)
	for i in range(nb_primes-_sage_const_1 ):
		j=prev_seq[i]
		k=next_seq[i]
		if j!=k:
			L=L*(p_above[i+_sage_const_1 ]**(_sage_const_2 *k))
			L=L*(p_above_conj[i+_sage_const_1 ]**(_sage_const_2 *(-k)))
	return L

def gen_candidates(K, p_above, p_above_conj):
	nb_primes=len(p_above)
	print(nb_primes)

	L_2=p_above[_sage_const_0 ]
	L_1=prod(p_above_conj[_sage_const_1 :len(p_above)])**(_sage_const_2 )
	L=L_1*L_2

	#could try not generating it each time
	G=cartesian_product([[-_sage_const_1 ,_sage_const_1 ] for i in range(nb_primes-_sage_const_1 )])

	name="candidate_conductors"+str(nb_primes)+".md"
	print(name)

	F=open(name, 'w', encoding="utf-8")
	F.write(f'{nb_primes}\n')

	prev_seq=G[_sage_const_0 ]
	nb_candidates=_sage_const_0 
	first=True
	for next_seq in G:
		if first:
			first=False
			continue
		L=next(L,p_above, p_above_conj,nb_primes,prev_seq,next_seq)
		prev_seq=next_seq

		f_im=Integer(L.gens_reduced()[_sage_const_0 ].imag())
		f_re=Integer(L.gens_reduced()[_sage_const_0 ].real())
		
		pim=(abs(f_im)).is_pseudoprime()
		pre=(abs(f_re)).is_pseudoprime()
		if pim or pre:
			if pim:
				F.write(f'{f_im} {_sage_const_1 }')
				F.write('\n')
				nb_candidates+=_sage_const_1 
			else:
				F.write(f'{f_im} {_sage_const_0 }')
				F.write('\n')

			if pre:
				F.write(f'{f_re} {_sage_const_1 }')
				F.write('\n')
				nb_candidates+=_sage_const_1 
			else:
				F.write(f'{f_re} {_sage_const_0 }')
				F.write('\n')
	F.close()


def add_prime_above(p_above, p_above_conj, p):
	primes_above=K.primes_above(p)
	p_above.append(primes_above[_sage_const_0 ])
	p_above_conj.append(primes_above[_sage_const_1 ])
	return (p_above, p_above_conj)


initial_nb_primes=_sage_const_20 
max_nb_primes=_sage_const_21 

K = NumberField(x**_sage_const_2 +_sage_const_1 , names=('i',)); (i,) = K._first_ngens(1)
p=_sage_const_5 
split_primes=[]
p_above=[]
p_above_conj=[]
i=_sage_const_0 

while i<initial_nb_primes:
	if p&_sage_const_3 ==_sage_const_1 :
		split_primes.append(p)
		(p_above, p_above_conj)=add_prime_above(p_above, p_above_conj, p)
		i+=_sage_const_1 
	p=p.next_prime()

nb_primes=initial_nb_primes

while nb_primes<max_nb_primes:
	while p&_sage_const_3 !=_sage_const_1 :
		p=p.next_prime()

	split_primes.append(p)
	print(f"\n next: {p}\n")
	(p_above, p_above_conj)=add_prime_above(p_above, p_above_conj, p)

	gen_candidates(K, p_above, p_above_conj)
	print(split_primes)

	p=p.next_prime()
	nb_primes+=_sage_const_1 

