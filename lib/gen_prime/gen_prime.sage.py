

# This file was *autogenerated* from the file gen_prime.sage
from sage.all_cmdline import *   # import sage library

_sage_const_17 = Integer(17); _sage_const_80 = Integer(80); _sage_const_5 = Integer(5); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3014688773870022715669219 = Integer(3014688773870022715669219)
nb_primes=_sage_const_17 
conductor=_sage_const_80 

primes=[]
p=_sage_const_5 
i=_sage_const_0 
while i<nb_primes:
	if p&_sage_const_3 ==_sage_const_1 :
		primes.append(p)
		i+=_sage_const_1 
	p=p.next_prime()
print(primes)

L1=prod(primes[_sage_const_1 :])**_sage_const_2 
L2=_sage_const_5 
L=L1*L2

f=_sage_const_3014688773870022715669219 
#f_squared=f**2

#(le L3 est peut etre la pour avoir une sécurité plus grosse)

print(L1, L2)
p=L-_sage_const_1 
c=_sage_const_1 
pmone=_sage_const_1 

while True:
	p=c*L-_sage_const_1 
	if p.is_pseudoprime() and p&_sage_const_3 ==_sage_const_3 :
		pmone=-_sage_const_1 
		break
	p=p+_sage_const_2 
	if p.is_pseudoprime() and p&_sage_const_3 ==_sage_const_3 :
		pmone=_sage_const_1 
		break
	c+=_sage_const_1 
	print(c)
print(p in Primes())
print(p, c, pmone)

filename="../../txt/prime_"+str(conductor)+"_bits.md"
G=open(filename,"w")

G.write(f"{p}\n")
G.write(f"{c}\n{pmone}")
G.close()

