

# This file was *autogenerated* from the file isog.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_10 = Integer(10); _sage_const_11 = Integer(11); _sage_const_13 = Integer(13); _sage_const_5 = Integer(5)
from sage.schemes.elliptic_curves.weierstrass_morphism import *
from sage.schemes.elliptic_curves.hom_frobenius import *
from sage.schemes.elliptic_curves.hom_scalar import EllipticCurveHom_scalar
#from sage.schemes.elliptic_curves.ell_finite_field import *
from argparse import ArgumentParser

parser=ArgumentParser()
parser.add_argument('-n', '--nbprimes', default='14')

args=parser.parse_args()

n=args.nbprimes
prime_name="../txt/prime_"+n+"_primes.md"

n=Integer(n)

F=open(prime_name, "r")
p=Integer(F.readline())

K = GF((p,_sage_const_2 ), modulus=[_sage_const_1 ,_sage_const_0 ,_sage_const_1 ], names=('t',)); (t,) = K._first_ngens(1)
R = K['x']; (x,) = R._first_ngens(1)

E0=EllipticCurve(K, [_sage_const_1 ,_sage_const_0 ])
E0.set_order((p+_sage_const_1 )**_sage_const_2 )


#print(psi.rational_maps())
#print(phi.rational_maps())


iota=WeierstrassIsomorphism(E0,[-t,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ], E0)

#E0=E0.change_ring(F)
#frob=EllipticCurveHom_frobenius(E0)
#E0=E0.change_ring(K)

#print(frob+iota)

#print(Q, "maps to: ",(frob*iota)(Q))

n=_sage_const_10 
m=_sage_const_11 

psi_l=E0.division_polynomial(_sage_const_13 ,x)
psi_iota_l=psi_l(-x)

print(psi_l-psi_iota_l, _sage_const_5 *gcd(psi_l, psi_iota_l))


