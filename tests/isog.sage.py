

# This file was *autogenerated* from the file ../../tests/isog.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_13 = Integer(13); _sage_const_2627 = Integer(2627); _sage_const_3170 = Integer(3170); _sage_const_8833 = Integer(8833); _sage_const_4122 = Integer(4122)
from sage.schemes.elliptic_curves.weierstrass_morphism import *
from sage.schemes.elliptic_curves.hom_frobenius import *
from sage.schemes.elliptic_curves.hom_scalar import EllipticCurveHom_scalar
from argparse import ArgumentParser
from sage.rings.finite_rings.integer_mod import square_root_mod_prime
from sage.schemes.elliptic_curves.hom_composite import EllipticCurveHom_composite as hom_comp
from sage.schemes.elliptic_curves.isogeny_small_degree import isogenies_2

parser=ArgumentParser()
parser.add_argument('-n', '--nbprimes', default='3')

args=parser.parse_args()



n=args.nbprimes
prime_name="../txt/prime_"+n+"_primes.md"

n=Integer(n)

F=open(prime_name, "r")
p=Integer(F.readline())

K = GF((p,_sage_const_2 ), modulus=[_sage_const_1 ,_sage_const_0 ,_sage_const_1 ], names=('t',)); (t,) = K._first_ngens(1)
R = K['x']; (x,) = R._first_ngens(1)

E0=EllipticCurve(K, [_sage_const_1 ,_sage_const_0 ])
E0.set_order((p+_sage_const_1 )**_sage_const_2 )



iota=WeierstrassIsomorphism(E0,[-t,_sage_const_0 ,_sage_const_0 ,_sage_const_0 ], E0)
l=_sage_const_13 
P,Q=E0.torsion_basis(l)

sqrt_l=square_root_mod_prime(Mod(-_sage_const_1 , l), p=l)

mul_sqrt_l=E0.scalar_multiplication(sqrt_l)

R=E0(_sage_const_2627 *t + _sage_const_3170 , _sage_const_8833 *t + _sage_const_4122 , _sage_const_1 )

print(f"{R}")
print(f"{mul_sqrt_l(P)}, {iota(P)}")
print(f"{mul_sqrt_l(Q)}, {iota(Q)}")
print(f"{mul_sqrt_l(Q)==iota(Q)}")
print(f"{P.order()}, {Q.order()}")



